(()=>{var V=computeScores=({testee:g,session:w,answers:f,specs:d})=>{let h=(t,n="answerValue")=>Object.values(t).sort(s=>s.order).map(s=>s[n]),v=(t,n,s)=>{let o=n.map(r=>r-1),a=s.filter((r,c)=>o.includes(c)),i=a.filter(r=>r.answerValue=="")?.length||0;return{straightScore:a.filter(r=>r.answerValue!="").reduce((r,c)=>r+Number(c),0),straightOmissions:i}},N=({likert:{max:t,min:n}},s,o)=>{let a=t+n,i=s.map(e=>e-1),u=o.filter((e,l)=>i.includes(l)),r=u.filter(e=>e.answerValue=="")?.length||0;return{reversedScore:u.filter(e=>e.answerValue!="").map(e=>a-e).reduce((e,l)=>e+Number(l),0),reversedOmissions:r}},p=(t,n,s,o,a,i)=>{let u=o.norms.getNorms,r=eval?.(`"use strict";${u};fn(${JSON.stringify({...a,...i})},"${t}")`),c=o.norms[r];return eval?.(`"use strict";${c};fn(${JSON.stringify({rawScore:n,meanScore:s})})`)},m={},S=h(f,"answerValue");for(let[t,{name:n,straightItems:s,reversedItems:o}]of Object.entries(d.scales)){let{straightScore:a,straightOmissions:i}=v(d,s,S),{reversedScore:u,reversedOmissions:r}=N(d,o,S),c=i+r,e=a+u,l=Number((e/(s.length+o.length-c)).toFixed(2)),O=p(t,e,l,d,g,w);m={...m,[t]:{scaleId:t,name:n,rawScore:e,meanScore:l,standardScore:O,omissions:c}}}return m};})();
